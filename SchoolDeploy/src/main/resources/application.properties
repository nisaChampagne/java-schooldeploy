server.port=${PORT:2019}

#Feature that determines what happens when no accessors are found for a type
#(and there are no annotations to indicate it is meant to be serialized).
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false

#drop n create table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=create
spring.datasource.initialization-mode=always

# For h2 database
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true
# End h2 configuration

# To turn off Spring exception handling
server.error.whitelabel.enabled=false


#actuator
#should have access restricted to ADMIN
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true

# For PostgreSQL
#spring.datasource.url=jdbc:postgresql://localhost:5432/ourcourses
#spring.datasource.username=postgres
#spring.datasource.password=${MYDBPASSWORD:password}
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Which db to run
#local.run.db=H2
local.run.db=POSTGRESQL

# Should we use createBlob from java.sql.connection. PostgreSQL requires it to be true.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


# Environment Variables Needed for PostgreSQL database
# MYDBHOST
# MYDBNAME
# MYDBUSER
# MYDBPASSWORD

# Environment Variables Needed for OAuth2 Authentication Server
# OAUTHCLIENTID
# OAUTHCLIENTSECRET

# Find heroku info
# heroku config -a nchampag-schooldeploy
#postgres://rpsronlofbjxsm:496e2b06d59b919db7332d3526c393f67b43ffce2eb0b15d07c3f0bca06f8960@ec2-54-235-86-101.compute-1.amazonaws.com:5432/d594jflfs9rcfe
# posgress://username     :password                                                       @url                                      :5432/dbname









